import { createUsername } from "../helper/index.js";
import bcrypt from "bcryptjs";
import {
  COOKIE_EXPIRES_TIME,
  KEYS,
  ACCOUNT_TYPES,
  MAX,
  ROLES,
} from "../constant/index.js";
import {
  encodedToken,
  verifyJWT,
  logTokenGeneration,
} from "../configs/jwt.config.js";
import express from "express";
const app = express();
import { sendVerificationEmail,sendResetPasswordEmail } from "../configs/mail.config.js";
import {
  isExistAccount,
  findAccount,
  createAccount,
  createUser,
  changeUserPassword,
  uploadAvatar,
  getUserInfo,
  updateProfile,
  updateUserAvatar,
} from "../service/account.service.js";
import Account from "../models/account.js";
import { uploadImage } from "../service/common.service.js";
import jwt from "jsonwebtoken";
import { createCustomer } from "../service/customer.service.js";


export const registerLocal = async (req, res) => {
  try {
    const { email, password, name } = req.body;
    console.log("üîπ B·∫Øt ƒë·∫ßu ƒëƒÉng k√Ω:", { email, name });

    // Ki·ªÉm tra t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i ch∆∞a
    const exists = await isExistAccount(email);
    if (exists) {
      console.warn("‚ö†Ô∏è Email ƒë√£ t·ªìn t·∫°i:", email);
      return res.status(400).json({ message: "Email already registered" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    console.log("‚úÖ M·∫≠t kh·∫©u ƒë√£ m√£ h√≥a");

    const newAccount = await createAccount(
      email,
      hashedPassword,
      ACCOUNT_TYPES.LOCAL
    );
    if (!newAccount || !newAccount.id) {
      console.error("‚ùå L·ªói t·∫°o t√†i kho·∫£n:", newAccount);
      return res
        .status(409)
        .json({ message: "T·∫°o t√†i kho·∫£n th·∫•t b·∫°i, th·ª≠ l·∫°i" });
    }
    console.log("‚úÖ T·∫°o t√†i kho·∫£n th√†nh c√¥ng:", newAccount);

    const username = createUsername(email, newAccount.id);
    console.log("üîπ Username ƒë∆∞·ª£c t·∫°o:", username);

    console.log("üîπ B·∫Øt ƒë·∫ßu t·∫°o user...");
    const newUser = await createUser(newAccount.id, name, username);
    if (!newUser) {
      console.error("‚ùå L·ªói khi t·∫°o user:", newUser);
      return res
        .status(409)
        .json({ message: "T·∫°o t√†i kho·∫£n th·∫•t b·∫°i, th·ª≠ l·∫°i" });
    }
    console.log("‚úÖ T·∫°o user th√†nh c√¥ng:", newUser);

    // üëâ T·∫°o Customer n·∫øu user c√≥ role l√† 'customer'
    if (newUser.role === ROLES.CUSTOMER) {
      await createCustomer(newUser.user_id);
      console.log("‚úÖ T·∫°o customer th√†nh c√¥ng");
    }

    const verifyToken = await encodedToken(newAccount);
    await sendVerificationEmail(email, verifyToken);
    console.log("üì© Email x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i");

    res.status(201).json({
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng! Ki·ªÉm tra email ƒë·ªÉ x√°c nh·∫≠n t√†i kho·∫£n.",
      account: newAccount,
      user: newUser,
    });
  } catch (error) {
    console.error("‚ùå L·ªói ƒëƒÉng k√Ω local:", error);
    res.status(500).json({ message: "L·ªói h·ªá th·ªëng, th·ª≠ l·∫°i sau." });
  }
};
//////////////////////////////


export const registerStaff = async (req, res) => {
  try {
    const { email, password, name } = req.body;
    console.log("üîπ B·∫Øt ƒë·∫ßu ƒëƒÉng k√Ω nh√¢n vi√™n:", { email, name });

    // Ki·ªÉm tra t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i ch∆∞a
    const exists = await isExistAccount(email);
    if (exists) {
      console.warn("‚ö†Ô∏è Email ƒë√£ t·ªìn t·∫°i:", email);
      return res.status(400).json({ message: "Email already registered" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    console.log("‚úÖ M·∫≠t kh·∫©u ƒë√£ m√£ h√≥a");

    const newAccount = await createAccount(
      email,
      hashedPassword,
      ACCOUNT_TYPES.LOCAL
    );
    if (!newAccount || !newAccount.id) {
      console.error("‚ùå L·ªói t·∫°o t√†i kho·∫£n:", newAccount);
      return res
        .status(409)
        .json({ message: "T·∫°o t√†i kho·∫£n th·∫•t b·∫°i, th·ª≠ l·∫°i" });
    }
    console.log("‚úÖ T·∫°o t√†i kho·∫£n th√†nh c√¥ng:", newAccount);

    const username = createUsername(email, newAccount.id);
    console.log("üîπ Username ƒë∆∞·ª£c t·∫°o:", username);

    console.log("üîπ B·∫Øt ƒë·∫ßu t·∫°o user...");
    const newUser = await createUser(
      newAccount.id,
      name,
      username,
      "",     // avatar
      "",     // phone
      "",     // address
      ROLES.STAFF // ‚úÖ role truy·ªÅn ƒë√∫ng v·ªã tr√≠
    );    if (!newUser) {
      console.error("‚ùå L·ªói khi t·∫°o user:", newUser);
      return res
        .status(409)
        .json({ message: "T·∫°o t√†i kho·∫£n th·∫•t b·∫°i, th·ª≠ l·∫°i" });
    }
    console.log("‚úÖ T·∫°o user th√†nh c√¥ng:", newUser);

    // üëâ T·∫°o Staff n·∫øu user c√≥ role l√† 'staff'
    if (newUser.role === ROLES.STAFF) {
      await createStaff(newUser.user_id); // üëà G·ªçi h√†m t·∫°o staff
      console.log("‚úÖ T·∫°o staff th√†nh c√¥ng");
    }

    const verifyToken = await encodedToken(newAccount);
    await sendVerificationEmail(email, verifyToken);
    console.log("üì© Email x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i");

    res.status(201).json({
      message: "ƒêƒÉng k√Ω nh√¢n vi√™n th√†nh c√¥ng! Ki·ªÉm tra email ƒë·ªÉ x√°c nh·∫≠n t√†i kho·∫£n.",
      account: newAccount,
      user: newUser,
    });
  } catch (error) {
    console.error("‚ùå L·ªói ƒëƒÉng k√Ω nh√¢n vi√™n:", error);
    res.status(500).json({ message: "L·ªói h·ªá th·ªëng, th·ª≠ l·∫°i sau." });
  }
};


export const verifyAccount = async (req, res) => {
  try {
    const { token } = req.query;
    console.log("token nh·∫≠n ƒë∆∞·ª£c l√†:", token);
    if (!token) {
      return res.status(400).json({ message: "Token kh√¥ng h·ª£p l·ªá!" });
    }

    const decoded = await verifyJWT(token);
    console.log("üìú Decoded JWT:", decoded);

    if (!decoded || !decoded.sub) {
      return res
        .status(400)
        .json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
    }

    const account = await findAccount(decoded.sub);
    if (!account) {
      return res.status(404).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!" });
    }

    if (account.is_verified) {
      return res
        .status(400)
        .json({ message: "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√°c minh tr∆∞·ªõc ƒë√≥!" });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i x√°c minh
    await account.update({ is_verified: true });

    // Sau khi x√°c minh th√†nh c√¥ng, chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng t·ªõi trang ch·ªß c·ªßa client
    return res.redirect(`${process.env.CLIENT_URL}/account/login`);
  } catch (error) {
    console.error("‚ùå L·ªói x√°c minh t√†i kho·∫£n:", error);
    return res.status(500).json({ message: "L·ªói h·ªá th·ªëng, th·ª≠ l·∫°i sau." });
  }
};

//login
export const postLogin = async (req, res) => {
  try {
    const email = req.body.email?.toLowerCase();
    const { password } = req.body;

    const account = await findAccount(email);
    if (!account) {
      return res.status(406).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });
    }

    if (!account.is_verified) {
      return res.status(403).json({
        message: "T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c x√°c minh. Vui l√≤ng ki·ªÉm tra email.",
      });
    }

    const isMatch = await bcrypt.compare(password, account.password);
    if (!isMatch) {
      return res.status(401).json({ message: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });
    }
    // set cookie with jwt

    const token = await encodedToken(account);

    res.cookie("jwt_token", token, {
      httpOnly: true,
      expires: new Date(Date.now() + 7 * 24 * 3600 * 1000), // Cookie h·∫øt h·∫°n sau 1 ng√†y
    });

    return res.status(200).json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      token,
      expires: new Date(Date.now() + 7 * 24 * 3600 * 1000),
    });
  } catch (error) {
    console.error("POST LOGIN ERROR: ", error);
    return res.status(503).json({ message: "L·ªói d·ªãch v·ª•, th·ª≠ l·∫°i sau" });
  }
};
//adminlogin
export const adminLogin = async (req, res) => {
  try {
    const email = req.body.email?.toLowerCase();
    const { password } = req.body;

    const account = await findAccount(email);
    if (!account) {
      return res.status(406).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });
    }

    if (!account.is_verified) {
      return res.status(403).json({
        message: "T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c x√°c minh. Vui l√≤ng ki·ªÉm tra email.",
      });
    }

    // ‚ùóÔ∏èKi·ªÉm tra quy·ªÅn
    if (account.role !== "admin") {
      return res.status(403).json({ message: "T√†i kho·∫£n kh√¥ng c√≥ quy·ªÅn admin" });
    }

    const isMatch = await bcrypt.compare(password, account.password);
    if (!isMatch) {
      return res.status(401).json({ message: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });
    }

    const token = await encodedToken(account);
    res.cookie("jwt_token", token, {
      httpOnly: true,
      expires: new Date(Date.now() + 7 * 24 * 3600 * 1000),
    });

    return res.status(200).json({
      message: "ƒêƒÉng nh·∫≠p admin th√†nh c√¥ng",
      token,
      expires: new Date(Date.now() + 7 * 24 * 3600 * 1000),
    });
  } catch (error) {
    console.error("ADMIN LOGIN ERROR: ", error);
    return res.status(503).json({ message: "L·ªói d·ªãch v·ª•, th·ª≠ l·∫°i sau" });
  }
};

/////////////////////////
export const postLogout = async (req, res) => {
  try {
    // N·∫øu req.logout() c√≥ s·∫µn (ƒë∆∞·ª£c cung c·∫•p b·ªüi Passport khi s·ª≠ d·ª•ng session),
    // g·ªçi n√≥ ƒë·ªÉ h·ªßy phi√™n ƒëƒÉng nh·∫≠p.
    if (typeof req.logout === "function") {
      req.logout((err) => {
        if (err) {
          console.error("L·ªói khi logout:", err);
        }
      });
    }

    // X√≥a cookie ch·ª©a JWT (d√π b·∫°n d√πng session hay JWT l∆∞u cookie, x√≥a cookie v·∫´n an to√†n)
    res.clearCookie("jwt_token", { httpOnly: true });

    return res.status(200).json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng" });
  } catch (error) {
    console.error("POST LOGOUT ERROR:", error);
    return res.status(503).json({ message: "L·ªói d·ªãch v·ª•, th·ª≠ l·∫°i sau" });
  }
};

// Gi·∫£ s·ª≠ b·∫°n c√≥ h√†m sendResetPasswordEmail ƒë·ªÉ g·ª≠i email. Trong v√≠ d·ª• test, ch√∫ng ta s·∫Ω in token ra console.
// import { sendResetPasswordEmail } from "../configs/mail.config.js";

/**
 * Endpoint g·ª≠i y√™u c·∫ßu reset password
 * POST /reset-password-request
 * Body: { email: string }
 */
export const requestPasswordReset = async (req, res) => {
  try {
    const { email } = req.body;
    if (!email) {
      return res.status(400).json({ message: "Email l√† b·∫Øt bu·ªôc." });
    }

    const account = await findAccount(email.toLowerCase());
    if (!account) {
      return res.status(404).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i." });
    }

    const resetToken = await encodedToken(account, "15m");

    // ‚ûï G·ªåI SEND EMAIL T·∫†I ƒê√ÇY
    await sendResetPasswordEmail(account.email, resetToken);

    console.log(`Reset token cho ${email}: ${resetToken}`);
    return res.status(200).json({
      message: "Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i. Vui l√≤ng ki·ªÉm tra email.",
    });
  } catch (error) {
    console.error("L·ªói trong requestPasswordReset:", error);
    return res
      .status(500)
      .json({ message: "L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau." });
  }
};

//t·∫°m ·ªïn


export const resetPassword = async (req, res) => {
  try {
    const { token, newPassword } = req.body;
    console.log("token nh·∫≠n ƒë∆∞·ª£c l√†",token);
    console.log("newpassword nh·∫≠n ƒë∆∞·ª£c l√†",newPassword);
    if (!token || !newPassword) {
      return res
        .status(400)
        .json({ message: "Token v√† m·∫≠t kh·∫©u m·ªõi l√† b·∫Øt bu·ªôc." });
    }

    // X√°c th·ª±c token
    const decoded = await verifyJWT(token);
    if (!decoded || !decoded.sub) {
      return res
        .status(400)
        .json({ message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n." });
    }

    // Gi·∫£ s·ª≠ token ƒë∆∞·ª£c t·∫°o v·ªõi payload c√≥ tr∆∞·ªùng "sub" ch·ª©a email c·ªßa ng∆∞·ªùi d√πng
    const account = await findAccount(decoded.sub);
    if (!account) {
      return res.status(404).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i." });
    }

    const hashedPassword = await bcrypt.hash(newPassword, 10);

    await account.update({ password: hashedPassword });

    return res
      .status(200)
      .json({ message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng." });
  } catch (error) {
    console.error("L·ªói trong resetPassword:", error);
    return res
      .status(500)
      .json({ message: "L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau." });
  }
};

export const updatePassword = async (req, res) => {
  try {
    if (!req.user) {
      return res.status(401).json({ message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p." });
    }

    const { oldPassword, newPassword } = req.body;
    if (!oldPassword || !newPassword) {
      return res
        .status(400)
        .json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin." });
    }

    const account = await Account.findOne({
      where: { id: req.user.account_id },
    });
    if (!account) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n." });
    }

    const isMatch = await bcrypt.compare(oldPassword, account.password);
    if (!isMatch) {
      return res.status(400).json({ message: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng." });
    }

    account.password = await bcrypt.hash(newPassword, 10);
    await account.save();

    res.clearCookie("jwt_token");
    return res.json({
      message: "C·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.",
    });
  } catch (error) {
    return res.status(500).json({ message: "L·ªói m√°y ch·ªß n·ªôi b·ªô." });
  }
};

export const getUserProfile = async (req, res) => {
  try {
    if (!req.user) {
      return res.status(401).json({ message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p." });
    }

    const userInfo = await getUserInfo(req.user.id);
    if (!userInfo) {
      return res
        .status(404)
        .json({ message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin user." });
    }

    return res.status(200).json({ success: true, data: userInfo });
  } catch (error) {
    console.error("L·ªói khi l·∫•y th√¥ng tin user:", error);
    return res.status(500).json({ message: "L·ªói server." });
  }
};
export const updateUserProfile = async (req, res) => {
  try {
    console.log("üìå Gi√° tr·ªã req.user:", req.user);

    if (!req.user || !req.user.id) {
      return res.status(401).json({ message: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p." });
    }

    const { name, username, phone, address } = req.body;

    if (!name && !username && !phone && !address) {
      return res.status(400).json({ message: "Kh√¥ng c√≥ d·ªØ li·ªáu c·∫≠p nh·∫≠t." });
    }

    const updatedUser = await updateProfile(req.user.id, {
      name,
      username,
      phone,
      address,
    });

    if (!updatedUser) {
      return res.status(500).json({ message: "C·∫≠p nh·∫≠t th·∫•t b·∫°i." });
    }

    return res
      .status(200)
      .json({
        success: true,
        message: "C·∫≠p nh·∫≠t th√†nh c√¥ng.",
        data: updatedUser,
      });
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t profile:", error);
    return res.status(500).json({ message: "L·ªói server." });
  }
};

////////////////////////////////////

export const googleLoginCallback = async (req, res) => {
  try {
    if (!req.user) {
      console.log("Google authentication failed");

      return res.status(401).json({ message: "Google authentication failed" });
    }

    const account = req.user;

    // T·∫°o JWT token v·ªõi c√πng c√°ch nh∆∞ postLogin (s·ª≠ d·ª•ng encodedToken)
    const token = await encodedToken(account);
    console

    // Set cookie gi·ªëng postLogin
    const expiresIn = 7 * 24 * 3600 * 1000; // 7 ng√†y
    res.cookie("jwt_token", token, {
      httpOnly: true,
      expires: new Date(Date.now() + expiresIn),
    });
    console.log("Redirecting to:", `http://localhost:5173/google-success?token=${token}&tokenExpires=${Date.now() + expiresIn}`);


    // Redirect k√®m token v√† th·ªùi gian h·∫øt h·∫°n (n·∫øu c·∫ßn ph√≠a FE bi·∫øt)
    return res.redirect(
      `http://localhost:5173/google-success?token=${token}&tokenExpires=${Date.now() + expiresIn}`
    );
  } catch (error) {
    console.error("L·ªói khi x·ª≠ l√Ω callback Google:", error);
    return res.status(500).json({ message: "Internal Server Error" });
  }
};

///////////////////
export const getMe = async (req, res) => {
  try {
    if (!req.user) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    console.log("Get /me ch·∫°y th√†nh c√¥ng");
    return res.status(200).json({
      success: true,
      message: "Get Me ch·∫°y th√†nh c√¥ng",
      user: {
        id: req.user.id,
        email: req.user.email,
        name: req.user.name,
        username: req.user.username,
        phone: req.user.phone,
        address: req.user.address,
        is_verified: req.user.is_verified,
        avatar: req.user.avatar,
        provider: req.user.provider,
        role: req.user.role,
      },
    });
  } catch (error) {
    console.error("L·ªói GET ME: ", error);
    return res.status(500).json({ message: "L·ªói server" });
  }
};

///////////////////////////////////

export const changeAvatar = async (req, res) => {
  try {
    const { username } = req.body;
    const file = req.file;

    if (!file) {
      return res.status(400).json({ error: "Vui l√≤ng ch·ªçn ·∫£nh" });
    }

    // Upload ·∫£nh l√™n Cloudinary
    const avatarUrl = await uploadImage(file.path, "avatars");

    // C·∫≠p nh·∫≠t avatar trong DB b·∫±ng service
    const updatedUser = await updateUserAvatar(username, avatarUrl);

    if (!updatedUser) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y user!" });
    }

    return res.json({
      message: "C·∫≠p nh·∫≠t avatar th√†nh c√¥ng!",
      avatar: updatedUser.avatar,
    });
  } catch (error) {
    return res.status(500).json({ error: error.message });
  }
};
