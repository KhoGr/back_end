import models from "../models/index.js";
import { Op } from "sequelize";

const { Attendance, Staff, WorkShift, User } = models;

// H√†m h·ªó tr·ª£: chuy·ªÉn sang gi·ªù Vi·ªát Nam (UTC+7)
const toVNTime = (dateStr) => {
  const date = new Date(dateStr);
  return new Date(date.getTime() + 7 * 60 * 60 * 1000);
};

export const attendanceService = {
  getAll: async () => {
    return await Attendance.findAll({
      include: [
        {
          model: Staff,
          as: "staff",
          attributes: ["staff_id", "position"],
          include: [
            {
              model: User,
              as: "user",
              attributes: ["user_id", "name", "username"],
            },
          ],
        },
        {
          model: WorkShift,
          as: "work_shift",
        },
      ],
      order: [["created_at", "DESC"]],
    });
  },

  // C·∫≠p nh·∫≠t ƒëi·ªÉm danh
create: async (data) => {
  const {
    staff_id,
    work_shift_id,
    check_in_time,
    check_out_time,
    status,
    note,
  } = data;

  const checkInVN = check_in_time ? toVNTime(check_in_time) : null;
  const checkOutVN = check_out_time ? toVNTime(check_out_time) : null;

  console.log(`[CREATE] üïí Check-in: ${checkInVN}, Check-out: ${checkOutVN}`);

  try {
    console.log("[CREATE] üîç Ki·ªÉm tra attendance tr√πng work_shift...");
    const existingAttendance = await Attendance.findOne({
      where: { staff_id, work_shift_id },
    });

    if (existingAttendance) {
      console.log(
        `[CREATE] ‚ö†Ô∏è Attendance ƒë√£ t·ªìn t·∫°i v·ªõi work_shift_id=${work_shift_id}, check_out=${existingAttendance.check_out_time}`
      );
      if (existingAttendance.check_out_time) {
        throw new Error("ƒê√£ ch·∫•m c√¥ng v√† checkout cho ca n√†y r·ªìi.");
      }
      throw new Error("ƒê√£ check-in cho ca n√†y, kh√¥ng th·ªÉ t·∫°o m·ªõi.");
    }

    console.log("[CREATE] üìÖ Ki·ªÉm tra c√°c ca kh√°c trong ng√†y...");
    const sameDayAttendances = await Attendance.findAll({
      where: {
        staff_id,
        check_in_time: { [Op.ne]: null },
      },
      include: [{ model: WorkShift, as: "work_shift" }],
      order: [["check_in_time", "ASC"]],
    });

    for (let i = 0; i < sameDayAttendances.length; i++) {
      const current = sameDayAttendances[i];
      const next = sameDayAttendances[i + 1];

      const currentOut = current.check_out_time;
      const nextIn = next?.check_in_time;

      console.log(`[CHECK] üìå So s√°nh v·ªõi attendance ID=${current.id}`);
      console.log(` - current.check_in: ${current.check_in_time}`);
      console.log(` - current.check_out: ${currentOut}`);
      console.log(` - next.check_in: ${nextIn}`);
      console.log(` - incoming checkIn: ${checkInVN}`);

      if (
        currentOut &&
        checkInVN > currentOut &&
        (!nextIn || checkInVN < nextIn)
      ) {
        console.log("‚úÖ Check-in n·∫±m gi·ªØa 2 ca => Cho ph√©p.");
        break;
      }

      if (
        checkInVN >= current.check_in_time &&
        (!currentOut || checkInVN <= currentOut)
      ) {
        console.log("‚ùå Check-in n·∫±m trong th·ªùi gian ca ƒë√£ ch·∫•m => Kh√¥ng h·ª£p l·ªá.");
        throw new Error("Gi·ªù check-in ƒëang n·∫±m trong ca ƒë√£ ch·∫•m c√¥ng tr∆∞·ªõc ƒë√≥.");
      }
    }

    // üëâ So s√°nh v·ªõi gi·ªù ca l√†m (start_time, end_time)
    console.log("[CREATE] üïµÔ∏è‚Äç‚ôÇÔ∏è L·∫•y th√¥ng tin work_shift hi·ªán t·∫°i...");
    const currentShift = await WorkShift.findOne({ where: { work_shift_id } });

    if (!currentShift) {
      throw new Error("Kh√¥ng t√¨m th·∫•y ca l√†m vi·ªác t∆∞∆°ng ·ª©ng.");
    }

    const shiftStart = toVNTime(`${currentShift.date}T${currentShift.start_time}`);
    const shiftEnd = toVNTime(`${currentShift.date}T${currentShift.end_time}`);

    console.log(`[CREATE] üîé So s√°nh gi·ªù check-in v·ªõi gi·ªù ca:`);
    console.log(` - Ca b·∫Øt ƒë·∫ßu: ${shiftStart}`);
    console.log(` - Ca k·∫øt th√∫c: ${shiftEnd}`);
    console.log(` - Check-in: ${checkInVN}`);

    let finalStatus = status;
    if (!finalStatus) {
      if (checkInVN <= shiftStart) {
        finalStatus = "present";
        console.log("‚úÖ ƒê√∫ng gi·ªù ho·∫∑c s·ªõm h∆°n => on_time");
      } else if (checkInVN > shiftStart && checkInVN < shiftEnd) {
        finalStatus = "late";
        console.log("‚ö†Ô∏è ƒêi tr·ªÖ => late");
      } else {
        finalStatus = "absent";
        console.log("‚ùå Check-in sau gi·ªù k·∫øt th√∫c => invalid");
      }
    }

    let hours_worked = 0;
    if (checkInVN && checkOutVN) {
      const diffMs = checkOutVN - checkInVN;
      hours_worked = parseFloat((diffMs / (1000 * 60 * 60)).toFixed(2));
    }

    console.log(`[CREATE] ‚úÖ T·∫°o attendance m·ªõi: hours_worked = ${hours_worked}, status = ${finalStatus}`);

    const created = await Attendance.create({
      staff_id,
      work_shift_id,
      check_in_time: checkInVN,
      check_out_time: checkOutVN,
      hours_worked,
      status: finalStatus,
      note,
    });

    console.log(`[CREATE] üéâ Attendance t·∫°o th√†nh c√¥ng: ID=${created.attendance_id}`);
    return created;
  } catch (err) {
    console.error("[CREATE] ‚ùå L·ªói khi t·∫°o attendance:", err.message);
    throw new Error("L·ªói khi t·∫°o attendance: " + err.message);
  }
},
// üìå Th√™m h√†m n√†y v√†o trong attendanceService:
update: async (attendance_id, data) => {
  const attendance = await Attendance.findByPk(attendance_id);
  if (!attendance) throw new Error("Kh√¥ng t√¨m th·∫•y attendance.");

  // ‚úÖ Chuy·ªÉn c·∫£ check-in v√† check-out t·ª´ payload (n·∫øu c√≥)
  const checkInVN = data.check_in_time ? toVNTime(data.check_in_time) : null;
  const checkOutVN = data.check_out_time ? toVNTime(data.check_out_time) : null;

  if (!checkInVN) throw new Error("Thi·∫øu gi·ªù check-in.");
  if (checkOutVN && checkOutVN <= checkInVN) {
    throw new Error("Check-out ph·∫£i sau check-in.");
  }

  // L·∫•y th√¥ng tin ca
  const shift = await WorkShift.findByPk(data.work_shift_id || attendance.work_shift_id);
  if (!shift) throw new Error("Kh√¥ng t√¨m th·∫•y ca l√†m vi·ªác.");

  const shiftEnd = toVNTime(`${shift.date}T${shift.end_time}`);
  if (checkOutVN && checkOutVN > shiftEnd) {
    console.warn("‚ö†Ô∏è Check-out v∆∞·ª£t qu√° gi·ªù ca, v·∫´n cho ph√©p nh∆∞ng c√≥ th·ªÉ t√≠nh overtime.");
  }

  // T√≠nh gi·ªù l√†m
  let hours_worked = attendance.hours_worked;
  if (checkInVN && checkOutVN) {
    const diffMs = checkOutVN - checkInVN;
    hours_worked = parseFloat((diffMs / (1000 * 60 * 60)).toFixed(2));
  }

  const updated = await attendance.update({
    check_in_time: checkInVN,
    check_out_time: checkOutVN,
    hours_worked,
    note: data.note ?? attendance.note,
    status: data.status ?? attendance.status,
    work_shift_id: data.work_shift_id ?? attendance.work_shift_id,
    staff_id: data.staff_id ?? attendance.staff_id,
  });

  return updated;
},  // L·∫•y ƒëi·ªÉm danh theo ID
  getById: async (id) => {
    const attendance = await Attendance.findByPk(id, {
      include: [
        { model: Staff, as: "staff" },
        { model: WorkShift, as: "work_shift" },
      ],
    });
    if (!attendance) throw new Error("Attendance not found");
    return attendance;
  },

  // X√≥a ƒëi·ªÉm danh
  delete: async (id) => {
    const attendance = await Attendance.findByPk(id);
    if (!attendance) throw new Error("Attendance not found");
    await attendance.destroy();
    return { message: "Deleted successfully" };
  },

  // L·∫•y ƒëi·ªÉm danh theo staff ID
  getByStaffId: async (staff_id) => {
    return await Attendance.findAll({
      where: { staff_id },
      include: [{ model: WorkShift, as: "work_shift" }],
      order: [["created_at", "DESC"]],
    });
  },

  // üîç L·ªçc ƒëi·ªÉm danh theo t√™n nh√¢n vi√™n ho·∫∑c ng√†y
  getFiltered: async ({ name, date } = {}) => {
    const whereAttendance = {};
    const whereStaff = {};

    if (date) {
      whereAttendance.created_at = {
        [Op.between]: [
          new Date(`${date}T00:00:00`),
          new Date(`${date}T23:59:59`),
        ],
      };
    }

    if (name) {
      whereStaff.name = {
        [Op.iLike]: `%${name}%`,
      };
    }

    return await Attendance.findAll({
      where: whereAttendance,
      include: [
        {
          model: Staff,
          as: "staff",
          where: whereStaff,
        },
        { model: WorkShift, as: "work_shift" },
      ],
      order: [["created_at", "DESC"]],
    });
  },
  // üìÖ L·∫•y ch·∫•m c√¥ng theo nh√¢n vi√™n + kho·∫£ng th·ªùi gian (th∆∞·ªùng l√† 1 th√°ng)
getByStaffAndPeriod: async ({ staff_id, start_date, end_date }) => {
  if (!staff_id || !start_date || !end_date) {
    throw new Error("Thi·∫øu th√¥ng tin l·ªçc (staff_id, start_date, end_date)");
  }

  const attendances = await Attendance.findAll({
    where: {
      staff_id,
      check_in_time: {
        [Op.gte]: new Date(`${start_date}T00:00:00`),
      },
      check_out_time: {
        [Op.lte]: new Date(`${end_date}T23:59:59`),
      },
    },
    include: [
      { model: WorkShift, as: "work_shift" },
    ],
    order: [["check_in_time", "ASC"]],
  });

  return attendances;
},

};
