import { ACCOUNT_TYPES, ROLES } from "../constant/index.js";
import User from "../models/user.js";
import Account from "../models/account.js";
import { uploadImage } from "./common.service.js";
import bcrypt from "bcryptjs";



export const isExistAccount = async (email) => {
  try {
    const account = await Account.findOne({ where: { email } });
    return !!account;
  } catch (error) {
    throw error;
  }
};
export const findAccount = async (email) => {
  try {
    return await Account.findOne({ where: { email } });
  } catch (error) {
    console.log("ko t√¨m th·∫•y t√†i kho·∫£n");
  }
};

// T·∫°o t√†i kho·∫£n m·ªõi
export const createAccount = async (
  email,
  password,
  authType = ACCOUNT_TYPES.LOCAL
) => {
  try {

    const newAccount = await Account.create({
      email,
      password,
      authType,
      createdDate: new Date(),
    });
    return newAccount; // Tr·∫£ v·ªÅ to√†n b·ªô ƒë·ªëi t∆∞·ª£ng Account thay v√¨ ch·ªâ id
  } catch (error) {
    throw error;
  }
};
export const createUser = async (
  accountId,
  name,
  username,
  avatar = "",
  phone = "",
  address = "",
  role = ROLES.CUSTOMER
) => {
  try {
    console.log("üîπ ƒêang t·∫°o user v·ªõi accountId:", accountId);

    // Ki·ªÉm tra role h·ª£p l·ªá
    if (![ROLES.ADMIN, ROLES.CUSTOMER, ROLES.SELLER].includes(role)) {
      console.warn("‚ö†Ô∏è Vai tr√≤ kh√¥ng h·ª£p l·ªá:", role);
      throw new Error("Vai tr√≤ kh√¥ng h·ª£p l·ªá");
    }

    // Ki·ªÉm tra xem t√†i kho·∫£n c√≥ t·ªìn t·∫°i kh√¥ng
    const account = await Account.findByPk(accountId);
    if (!account) {
      console.error("‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi ID:", accountId);
      throw new Error("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n t∆∞∆°ng ·ª©ng");
    }

    // B·ªè ph·∫ßn t·∫°o l·∫°i username ·ªü ƒë√¢y
    console.log("üîπ T·∫°o user v·ªõi username:", username);
    const finalPhone = phone.trim() === "" ? null : phone;


    // T·∫°o user m·ªõi trong database
    const newUser = await User.create({
      account_id: accountId,
      name,
      username,
      phone:finalPhone,
      address,
      role,
    });

    console.log("‚úÖ User ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng:", newUser);
    return newUser;
  } catch (error) {
    console.error("‚ùå L·ªói chi ti·∫øt khi t·∫°o user:", error);
    throw new Error(`L·ªói khi t·∫°o user: ${error.message}`);
  }
};


export const changeUserPassword = async (email, currentPassword, newPassword) => {
  try {
    // T√¨m t√†i kho·∫£n theo email
    const account = await findAccount(email);
    if (!account) {
      return { success: false, status: 404, message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i." };
    }

    // X√°c th·ª±c m·∫≠t kh·∫©u hi·ªán t·∫°i
    const isMatch = await bcrypt.compare(currentPassword, account.password);
    if (!isMatch) {
      return { success: false, status: 401, message: "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng." };
    }

    // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi trong database
    await account.update({ password: hashedPassword });

    return { success: true, message: "C·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng." };
  } catch (error) {
    console.error("L·ªói trong changeUserPassword:", error);
    return { success: false, status: 500, message: "L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau." };
  }
};



export const getUserInfo = async (userId) => {
  try {
    const user = await User.findOne({
      where: { user_id: userId },
      attributes: [
        "user_id",
        "account_id",
        "name",
        "username",
        "avatar",
        "phone",
        "address",
        "role",
        "created_at",
        "updated_at",
      ],
    });

    return user || null;
  } catch (error) {
    console.error("L·ªói khi l·∫•y d·ªØ li·ªáu user:", error);
    throw error;
  }
};

export const updateProfile = async (userId, updateData) => {
  try {
    console.log("üìå C·∫≠p nh·∫≠t profile cho user_id:", userId, "D·ªØ li·ªáu c·∫≠p nh·∫≠t:", updateData);

    if (!userId) {
      throw new Error("‚ùå user_id b·ªã undefined ho·∫∑c null!");
    }

    // C·∫≠p nh·∫≠t user trong database
    const [updatedRows] = await User.update(updateData, { where: { user_id: userId } });

    if (!updatedRows) {
      console.log("‚ùå Kh√¥ng c√≥ d√≤ng n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t.");
      return null;
    }

    // Tr·∫£ v·ªÅ user sau khi c·∫≠p nh·∫≠t
    const updatedUser = await User.findOne({
      where: { user_id: userId },
      attributes: ["user_id", "account_id", "name", "username", "phone", "address", "updated_at"],
    });

    return updatedUser;
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t user:", error);
    throw error;
  }
};
export const getUserProfile = (user) => {
  if (!user) return null;
  return {
    id: user.id,
    displayName: user.displayName,
    email: user.emails?.[0]?.value || "",
    photo: user.photos?.[0]?.value || "",
  };
};

export const logoutUser = (req) => {
  return new Promise((resolve, reject) => {
    req.logout((err) => {
      if (err) return reject(err);
      resolve();
    });
  });
};
// ho√†n th√†nh
////////////////////////////////////////////////////////////

export const uploadAvatar = async (filePath, username) => {
  try {
    // Upload ·∫£nh l√™n Cloudinary
    const avatarUrl = await uploadImage(filePath, "avatars"); // L∆∞u v√†o th∆∞ m·ª•c avatars

    // C·∫≠p nh·∫≠t avatar trong DB
    const updatedUser = await User.findOneAndUpdate(
      { username },
      { avatar: avatarUrl },
      { new: true }
    );

    if (!updatedUser) throw new Error("Kh√¥ng t√¨m th·∫•y user!");

    return updatedUser.avatar;
  } catch (error) {
    throw new Error(error.message);
  }
};
export const updateUserAvatar = async (userId, avatarUrl) => {
  try {
    console.log(">> T√¨m user v·ªõi user_id:", userId);

    const user = await User.findOne({ where: { user_id: userId } });
    if (!user) {
      console.error(">> Kh√¥ng t√¨m th·∫•y user.");
      throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.");
    }

    console.log(">> User t√¨m ƒë∆∞·ª£c:", user);

    user.avatar = avatarUrl;
    await user.save();

    console.log(">> ƒê√£ c·∫≠p nh·∫≠t avatar th√†nh c√¥ng:", avatarUrl);

    return user;
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t avatar:", error);
    throw new Error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t avatar.");
  }
};
